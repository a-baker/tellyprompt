"use strict";

var socket = io();

var username = localUser;
var chat_url = "/api/messages/discussion/" + chat_id;

function scrollDown() {
  window.scrollTo(0, document.body.scrollHeight || document.documentElement.scrollHeight);
}

function formatISOString(x) {
  var date = new Date(x);
  var days = date.getDate();
  days = days < 10 ? "0" + days : days;
  var months = date.getMonth();
  months = months < 10 ? "0" + months : months;
  var hours = date.getHours();
  hours = hours < 10 ? "0" + hours : hours;
  var minutes = date.getMinutes();
  minutes = minutes < 10 ? "0" + minutes : minutes;

  var formattedDate = days + "/" + months + "/" + date.getFullYear() + " at " + hours + ":" + minutes;
  return formattedDate;
}

$(".postButton").click(function () {
  scrollDown();
});

var Message = React.createClass({
  displayName: "Message",

  rawMarkup: function rawMarkup() {
    var rawMarkup = marked(this.props.children.toString(), { sanitize: true });
    return { __html: rawMarkup };
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "message" },
      React.createElement(
        "h2",
        { className: "messageAuthor" },
        this.props.author,
        React.createElement(
          "span",
          { className: "postTime" },
          this.props.dateTime
        )
      ),
      React.createElement("span", { dangerouslySetInnerHTML: this.rawMarkup() })
    );
  }
});

var MessageBox = React.createClass({
  displayName: "MessageBox",

  loadMessagesFromServer: function loadMessagesFromServer() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function (data) {
        this.setState({ data: data });
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  loadNewMessage: function loadNewMessage(message) {
    var messages = this.state.data;
    var newMessages = messages.concat([message]);
    this.setState({ data: newMessages });
    scrollDown();
  },
  handleMessageSubmit: function handleMessageSubmit(message) {
    var messages = this.state.data;
    // Optimistically set an id on the new message. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    message._id = Date.now();

    socket.emit('message', message);

    //    var newMessages = messages.concat([message]);
    //    this.setState({data: newMessages});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: message,
      success: function (data) {
        this.setState({ data: data });
      }.bind(this),
      error: function (xhr, status, err) {
        this.setState({ data: messages });
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function getInitialState() {
    return { data: [] };
  },
  componentDidMount: function componentDidMount() {
    this.loadMessagesFromServer();
    socket.emit("joinRoom", { room: chat_id, name: username });
    socket.on('message', function (msg) {
      this.loadNewMessage(msg);
    }.bind(this));

    socket.on('userJoined', function (user) {
      console.log(user + " joined the discussion.");
    }.bind(this));
  },
  render: function render() {
    return React.createElement(
      "div",
      { className: "messageBox" },
      React.createElement(MessageList, { data: this.state.data }),
      React.createElement(MessageForm, { onMessageSubmit: this.handleMessageSubmit })
    );
  }
});

var MessageList = React.createClass({
  displayName: "MessageList",

  render: function render() {
    var messageNodes = this.props.data.map(function (message) {
      return React.createElement(
        Message,
        { author: message.username, key: message._id, dateTime: formatISOString(message.dateTime) },
        message.content
      );
    });
    return React.createElement(
      "div",
      { className: "messageList" },
      messageNodes
    );
  }
});

var MessageForm = React.createClass({
  displayName: "MessageForm",

  getInitialState: function getInitialState() {
    return { author: '', text: '' };
  },
  handleAuthorChange: function handleAuthorChange(e) {
    this.setState({ author: e.target.value });
  },
  handleTextChange: function handleTextChange(e) {
    this.setState({ text: e.target.value });
  },
  handleSubmit: function handleSubmit(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();

    var tempDate = new Date();
    tempDate = tempDate.toISOString();

    if (!text) {
      return;
    }
    this.props.onMessageSubmit({ username: username, content: text, dateTime: tempDate, room: chat_id });
    this.setState({ author: '', text: '' });
  },
  render: function render() {
    return React.createElement(
      "form",
      { className: "messageForm", onSubmit: this.handleSubmit },
      React.createElement("input", {
        type: "text",
        placeholder: "Say something...",
        value: this.state.text,
        onChange: this.handleTextChange
      }),
      React.createElement("input", { type: "submit", value: "Post" })
    );
  }
});

ReactDOM.render(React.createElement(MessageBox, { url: chat_url }), document.getElementById('content'));
